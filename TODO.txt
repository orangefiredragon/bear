
# Phase 1

Investigate type of handlePostEntity

Logging
  Logging in handlers - come up with nicer function to Log
  log ... ... ...
  Logging to file
  Logging formatter
  Configure what to log
  Config where to log


Configuration
 - error handling
 - Env overwriting

Authentication
    - Basic - refactor
    - Configuration


# Phase 2

Database
  bootstrap
  connectivity
    http://hackage.haskell.org/package/resource-pool
    http://hackage.haskell.org/package/connection-pool
  Data model

User sessions based on cookie

Health
     - Combine health of all subsystems (DB connection)/features


# Phase 3


CORS endpoint -> {...}
https://hackage.haskell.org/package/wai-cors
CORS Configuration




App Exception handling & graceful shutdown
https://hackage.haskell.org/package/wai-middleware-catch-0.3.6/docs/Network-Wai-Middleware-Catch.html
https://hackage.haskell.org/package/wai-graceful-0.1.0.1/docs/Network-Wai-Graceful.html
http://hackage.haskell.org/package/warp-3.2.9/docs/Network-Wai-Handler-Warp.html#g:5

Throttling
https://hackage.haskell.org/package/wai-throttler-0.1.0.5/docs/Network-Wai-Middleware-Throttler.html

Session management
https://hackage.haskell.org/package/wai-session

Postgres connection
https://hackage.haskell.org/package/wai-session-postgresql-0.2.1.0/docs/Network-Wai-Session-PostgreSQL.html


Authentication
   - oAuth

Swagger doc improvements


Client API

Testing
  Unit tests


Code Documentation

Cabal

Stack - https://docs.haskellstack.org/en/stable/GUIDE/
